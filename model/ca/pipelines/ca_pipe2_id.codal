/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {
        uint32 id_instr_temp;
        bool cache_ready, cache_responses;

        if_code.transport(CP_PHS_DATA, cache_ready, cache_responses, id_instr_temp);
        s_id_instr = r_id_clear ? NOP_INSTRUCTION: id_instr_temp;

        //Opcode
        s_id_opc = s_id_instr[31..25] :: s_id_instr[14..12] :: s_id_instr[6..0];
        s_id_rs1 = s_id_instr[19..15];
        s_id_rs2 = s_id_instr[24..20];
        s_id_rd = s_id_instr[11..7];
        s_id_immedi = (int32)(int12)s_id_instr[31..20];
        s_id_immedb = ((int32)(int12)(s_id_instr[31..31]::s_id_instr[7..7]::s_id_instr[30..25]::s_id_instr[11..8])) << 1;
        s_id_immedu = (int32)(int20)s_id_instr[31..12] << 12;
        s_id_immeds = ((int32)(int12)(s_id_instr[31..25]::s_id_instr[11..7]));
        s_id_immedj = (int32)(int20)(s_id_instr[31..31]::s_id_instr[19..12]::s_id_instr[20..20]::s_id_instr[30..21]) << 1;

        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];

        // Set local stall.
        s_id_stall = 0;

        // Decoder activation
        dec(s_id_opc);

        //Select immediate after decoding
        switch(s_id_immsel){
            case IMM_NONE:
                s_id_immed = 0;
                break;
            case IMM_ITYPE:
                s_id_immed = s_id_immedi;
                break;
            case IMM_BTYPE:
                s_id_immed = s_id_immedb;
                break;
            case IMM_JTYPE:
                s_id_immed = s_id_immedj;
                break;
            case IMM_UTYPE:
                s_id_immed = s_id_immedu;
                break;
            case IMM_STYPE:
                s_id_immed = s_id_immeds;
                break;
            default:
                s_id_immed = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", s_id_immsel);
        }

        //Set rff1_sel signal based on forwarding constraints
        if ((r_wb_rd == s_id_rs1) && (r_wb_rd != 0) && (r_wb_regwrite)){
            s_id_rff1 = DATA_RESULT;
        }
        else{
            s_id_rff1 = REG1_SRC;
        }

        //Set rff2_sel signal based on forwarding constraints
        if ((r_wb_rd == s_id_rs2) && (r_wb_rd != 0) && (r_wb_regwrite)){
            s_id_rff2 = DATA_RESULT2;
        }
        else{
            s_id_rff2 = REG2_SRC;
        }

        //Set rff1 src value
        switch(s_id_rff1){
            case REG1_SRC:
                s_id_rff1_fwd = s_id_reg1;
                break;
            case DATA_RESULT:
                s_id_rff1_fwd = s_wb_result;
                break;
            default:
                s_id_rff1_fwd = 0;
        }

        switch(s_id_rff2){
            case REG2_SRC:
                s_id_rff2_fwd = s_id_reg2;
                break;
            case DATA_RESULT2:
                s_id_rff2_fwd = s_wb_result;
                break;
            default:
                s_id_rff2_fwd = 0;
        }

        // Update the registers
        id_output();
    };
};
event id_output : pipeline(pipe.ID)
{
    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Pipeline output
        // -----------------------------------------------------------------------------------------
        r_ex_pc = r_id_pc;
        r_ex_immed = s_id_immed;
        r_ex_rd = s_id_rd;
        r_ex_reg1 = s_id_rff1_fwd;
        r_ex_reg2 = s_id_rff2_fwd;
        r_ex_instr = s_id_instr;
        
        r_ex_aluop = s_id_aluop;
        r_ex_regwrite = s_id_regwrite;
        r_ex_alusrc2 = s_id_alusrc2;
        r_ex_halt = s_id_halt;

        r_ex_src1 = s_id_rs1;
        r_ex_src2 = s_id_rs2;

        r_ex_branchop = s_id_branchop;
        r_ex_rfwt_sel = s_id_rfwt_sel;
        r_ex_branch_sel = s_id_branch_sel;
        r_ex_alusrc1 = s_id_alusrc1;
    };
};
