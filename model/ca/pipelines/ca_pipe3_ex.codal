/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;
    use ex_memory;

    semantics
    {

        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt Instructions Indicated");
        }

        //Set forwarding control bits
        if ((r_me_rd == r_ex_src1) && (r_me_rd != 0) && (r_me_regwrite)){
            s_ex_fwdA = MEM_ALU1;
        }
        else if ((r_wb_rd == r_ex_src1)  && (r_wb_rd != 0) && (r_wb_regwrite)){
            s_ex_fwdA = WB_ALU1;
        }
        else{
            s_ex_fwdA = EX_REG1;
        }

        if ((r_me_rd == r_ex_src2) && (r_me_rd != 0) && (r_me_regwrite)){
            s_ex_fwdB = MEM_ALU2;
        }
        else if ((r_wb_rd == r_ex_src2)  && (r_wb_rd != 0) && (r_wb_regwrite)){
            s_ex_fwdB = WB_ALU2;
        }
        else{
            s_ex_fwdB = EX_REG2;
        }

        //Set fowrwarded values 
        switch (s_ex_fwdA){
            case MEM_ALU1:
                s_ex_fwdval1 = r_me_alu;
                break;
            case WB_ALU1:
                s_ex_fwdval1 = s_wb_result;
                break;
            case EX_REG1:
                s_ex_fwdval1 = r_ex_reg1;
                break;
            default:
                s_ex_fwdval1 = 0;
                break;
        }

        switch (s_ex_fwdB){
            case MEM_ALU2:
                s_ex_fwdval2 = r_me_alu;
                if (r_ex_memop == MEM_LW){
                    codasip_info(MEMOP3_ERROR, "mem alu fwd = %d\n", s_ex_fwdval2);
                }
                break;
            case WB_ALU2:
                s_ex_fwdval2 = s_wb_result;
                if (r_ex_memop == MEM_LW){
                    codasip_info(MEMOP3_ERROR, "wb alu fwd = %d\n", s_ex_fwdval2);
                }
                break;
            case EX_REG2:
                s_ex_fwdval2 = r_ex_reg2;
                if (r_ex_memop == MEM_LW){
                    codasip_info(MEMOP3_ERROR, "no fwd = %d\n", s_ex_fwdval2);
                }
                break;
            default:
                s_ex_fwdval2 = 0;
                break;
        }

        //select alu inputs
        switch (r_ex_alusrc2)
        {
            case ALU2_REG:
                s_ex_alu_input2 = s_ex_fwdval2;
                break;
            case ALU2_IMM:
                s_ex_alu_input2 = r_ex_immed;
                // codasip_info(SRC2_ERROR, "Custome print %d\n", s_ex_alu_input2);
                break;
            default:
                s_ex_alu_input2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }
        // codasip_info(SRC2_ERROR, "Custome print %d\n", s_ex_alu_input2);

        switch (r_ex_alusrc1){
            case ALU_SRC1_REG:
                s_ex_alu_input1 = s_ex_fwdval1;
                // codasip_info(SRC1_ERROR, "Custome print %d\n", s_ex_alu_input1);
                break;
            case ALU_SRC1_ZERO:
                s_ex_alu_input1 = 0;
                break;
            case ALU_SRC1_PC:
                s_ex_alu_input1 = r_ex_pc;
                break;
            default:
                s_ex_alu_input1 = 0;
                codasip_fatal(SRC1_ERROR, "Default case: %d\n", s_ex_alu_input1);
                break;
        }
        // codasip_info(SRC1_ERROR, "Custome print %d\n", s_ex_alu_input1);

        //Perform alu operation
        switch (r_ex_aluop)
        {
            case ALU_NOP:
                s_ex_alu = 0;
                break;
            case ALU_ADD:
                s_ex_alu = s_ex_alu_input1 + s_ex_alu_input2;
                break;
            case ALU_SUB:
                s_ex_alu = s_ex_alu_input1 - s_ex_alu_input2;
                break;
            case ALU_SLL:
                s_ex_alu = s_ex_alu_input1 << s_ex_alu_input2;
                break;
            case ALU_SLT:
                if (((int32) s_ex_alu_input1) < ((int32) s_ex_alu_input2)) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_SLTU:
                if (s_ex_alu_input1 < s_ex_alu_input2) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_XOR:
                s_ex_alu = s_ex_alu_input1 ^ s_ex_alu_input2;
                break;
            case ALU_SRL:
                s_ex_alu = s_ex_alu_input1 >> (uint5) s_ex_alu_input2;
                break;
            case ALU_SRA:
                s_ex_alu = (int32) s_ex_alu_input1 >> (uint5) s_ex_alu_input2;
                break;
            case ALU_OR:
                s_ex_alu = s_ex_alu_input1 | s_ex_alu_input2;
                break;
            case ALU_AND:
                s_ex_alu = s_ex_alu_input1 & s_ex_alu_input2;
                break;
            default:
                s_ex_alu = 0;
                codasip_fatal(ALU_ERROR, "Default case %d\n", s_ex_alu);
                break;
        }

        // codasip_info(ALU_ERROR, "Custome print %d\n", s_ex_alu);

        ex_memory();

        s_ex_brimm = r_ex_immed + r_ex_pc;

        switch (r_ex_branch_sel){
            case BRADD_ADDR:
                s_ex_target_addr = s_ex_brimm;
                break;
            case BRADD_ALU:
                s_ex_target_addr = s_ex_alu;
                break;
            default:
                s_ex_target_addr = 0;
                codasip_fatal(BNCH_SEL_ERROR, "Default case %d\n", s_ex_target_addr);
                break;
        }

        if (s_ex_alu == 0){
            s_ex_zero = 1;
        }
        else{
            s_ex_zero = 0;
        }

        // Timing
        ex_output();
    };
};

event ex_memory : pipeline(pipe.EX)
{
    semantics
    {
        uint1 op_rw; // read/write?
        uint2 op_type; // non-sequential/burst/idle?

        switch(r_ex_memop){
            case MEM_LB:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_LBU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_LH:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LHU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LW:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;
            case MEM_SB:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_SH:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_SW:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;
            case MEM_NOP:
                // codasip_info(MEMOP3_ERROR, "Memop = %d\n", r_ex_memop);
                op_rw = DONT_CARE;
                op_type = CP_AHB_IDLE;
                s_ex_memsize = DONT_CARE;
                break;
            default:
                op_rw = 0;
                op_type = 0;
                s_ex_memsize = 0;
                codasip_fatal(MEMOP_ERROR, "Default case %d\n", s_ex_target_addr);
                break;
        }

        // codasip_info(MEMOP3_ERROR, "r_ex_alu1 =  %d\n", s_ex_alu);
        // codasip_info(MEMOP3_ERROR, "encoded_data1 =  %d\n", s_ex_encoded_data);
        // codasip_info(MEMOP3_ERROR, "s_ex_fwdval21 = %d\n", s_ex_fwdval2);
        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu, s_ex_memsize);
        s_ex_encoded_data = ldst.encode_data(s_ex_fwdval2, s_ex_alu, s_ex_memsize);
        // codasip_info(MEMOP3_ERROR, "r_me_alu2 =  %d\n", s_ex_alu);
        // codasip_info(MEMOP3_ERROR, "encoded_data2 =  %d\n", s_ex_encoded_data);
        // codasip_info(MEMOP3_ERROR, "s_ex_fwdval22 = %d\n", s_ex_fwdval2);

        s_me_stall = s_ex_stall;
    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        r_me_pc = r_ex_pc;
        r_me_rd = r_ex_rd;
        r_me_regwrite = r_ex_regwrite;
        r_me_instr = r_ex_instr;
        r_me_alu = s_ex_alu;

        r_me_branchop = r_ex_branchop;
        r_me_target_addr = s_ex_target_addr;
        r_me_zero = s_ex_zero;
        r_me_rfwt_sel = r_ex_rfwt_sel;

        r_me_memop = r_ex_memop;
        r_me_memsize = s_ex_memsize;
        r_me_encoded_data = s_ex_encoded_data;
    };
};
